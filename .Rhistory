scale_y_continuous(name = "Silhouette width") +
theme_minimal() +
labs(
title = paste(method_label, "per cluster"),
x = "Cluster",
fill = "Cluster",
color = "Closest Cluster"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Return results
return(list(
silhouette_df = sil_df,
plot = silhouette_plot
))
}
# LOADING PACKAGES
library(Seurat)
library(cluster)   # For silhouette()
library(bluster)   # For approxSilhouette()
library(ggplot2)
library(dplyr)
# run runSilhouetteAnalysis
cell_Silhouette <- runSilhouetteAnalysis(
seurat_obj = scRNA,      # your Seurat object [after FindClusters()]
dims = 1:50,             # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
use_approx = FALSE,               # Set to TRUE to use approxSilhouette(), FALSE for silhouette()
cluster_col = "seurat_clusters"   # In metadata, what column stores your cluster information?
)
runSilhouetteAnalysis <- function(seurat_obj,
dims = 1:50,
use_approx = FALSE,
cluster_col = "seurat_clusters") {
# ------------------CALCULATE SILHOUETTE SCORE------------------
# Extract PCA results
pca_data <- Embeddings(seurat_obj, "pca")[, dims]
# Extract clustering results
cluster_id <- seurat_obj$cluster_col
if (use_approx) {
# Use approxSilhouette
sil_df <- approxSilhouette(pca_data, clusters = as.factor(cluster_id))   # Calculate Approximate Silhouette Score
colnames(sil_df) <- c("cluster", "neighbor", "sil_width")
} else {
# Use precise silhouette calculation
dist_matrix <- dist(pca_data)                               # Calculate the Euclidean distance matrix between all cells
sil <- silhouette(as.integer(cluster_id), dist_matrix)      # Calculate Precise Silhouette Score
sil_df <- as.data.frame(sil)
levels <- levels(as.factor(cluster_id))                     # Change the name back to Seurat's original cluster name
sil_df$cluster <- factor(levels[sil_df$cluster], levels = levels)
sil_df$neighbor <- factor(levels[sil_df$neighbor], levels = levels)
}
# Convert cluster and neighbor to factor
sil_df$cluster <- factor(sil_df$cluster)
sil_df$neighbor <- factor(sil_df$neighbor)
# ------------------DRAW PICTURE ------------------
method_label <- if (use_approx) {
"Approximate Silhouette Score"
} else {
"Precise Silhouette Score"
}
silhouette_plot <- ggplot(sil_df, aes(x = cluster, y = sil_width)) +
geom_violin(aes(fill = cluster), scale = "width", trim = FALSE, color = NA, alpha = 0.7) +
geom_jitter(aes(color = neighbor), width = 0.2, size = 1) +
scale_y_continuous(name = "Silhouette width") +
theme_minimal() +
labs(
title = paste(method_label, "per cluster"),
x = "Cluster",
fill = "Cluster",
color = "Closest Cluster"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Return results
return(list(
silhouette_df = sil_df,
plot = silhouette_plot
))
}
# LOADING PACKAGES
library(Seurat)
library(cluster)   # For silhouette()
library(bluster)   # For approxSilhouette()
library(ggplot2)
library(dplyr)
# run runSilhouetteAnalysis
cell_Silhouette <- runSilhouetteAnalysis(
seurat_obj = scRNA,      # your Seurat object [after FindClusters()]
dims = 1:50,             # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
use_approx = FALSE,               # Set to TRUE to use approxSilhouette(), FALSE for silhouette()
cluster_col = "seurat_clusters"   # In metadata, what column stores your cluster information?
)
runSilhouetteAnalysis <- function(seurat_obj,
dims = 1:50,
use_approx = FALSE,
cluster_col = "seurat_clusters") {
# ------------------CALCULATE SILHOUETTE SCORE------------------
# Extract PCA results
pca_data <- Embeddings(seurat_obj, "pca")[, dims]
# Extract clustering results
cluster_id <- seurat_obj$cluster_col
if (use_approx) {
# Use approxSilhouette
sil_df <- approxSilhouette(pca_data, clusters = as.factor(cluster_id))   # Calculate Approximate Silhouette Score
colnames(sil_df) <- c("cluster", "neighbor", "sil_width")
} else {
# Use precise silhouette calculation
dist_matrix <- dist(pca_data)                               # Calculate the Euclidean distance matrix between all cells
sil <- silhouette(as.integer(cluster_id), dist_matrix)      # Calculate Precise Silhouette Score
sil_df <- as.data.frame(sil)
levels <- levels(as.factor(cluster_id))                     # Change the name back to Seurat's original cluster name
sil_df$cluster <- factor(levels[sil_df$cluster], levels = levels)
sil_df$neighbor <- factor(levels[sil_df$neighbor], levels = levels)
}
# Convert cluster and neighbor to factor
sil_df$cluster <- factor(sil_df$cluster)
sil_df$neighbor <- factor(sil_df$neighbor)
# ------------------DRAW PICTURE ------------------
method_label <- if (use_approx) {
"Approximate Silhouette Score"
} else {
"Precise Silhouette Score"
}
silhouette_plot <- ggplot(sil_df, aes(x = cluster, y = sil_width)) +
geom_violin(aes(fill = cluster), scale = "width", trim = FALSE, color = NA, alpha = 0.7) +
geom_jitter(aes(color = neighbor), width = 0.2, size = 1) +
scale_y_continuous(name = "Silhouette width") +
theme_minimal() +
labs(
title = paste(method_label, "per cluster"),
x = "Cluster",
fill = "Cluster",
color = "Closest Cluster"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Return results
return(list(
silhouette_df = sil_df,
plot = silhouette_plot
))
}
# LOADING PACKAGES
library(Seurat)
library(cluster)   # For silhouette()
library(bluster)   # For approxSilhouette()
library(ggplot2)
library(dplyr)
# run runSilhouetteAnalysis
cell_Silhouette <- runSilhouetteAnalysis(
seurat_obj = scRNA,      # your Seurat object [after FindClusters()]
dims = 1:50,             # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
use_approx = FALSE,               # Set to TRUE to use approxSilhouette(), FALSE for silhouette()
cluster_col = "seurat_clusters"   # In metadata, what column stores your cluster information?
)
runSilhouetteAnalysis <- function(seurat_obj,
dims = 1:50,
use_approx = FALSE,
cluster_col = "seurat_clusters") {
# ------------------CALCULATE SILHOUETTE SCORE------------------
# Extract PCA results
pca_data <- Embeddings(seurat_obj, "pca")[, dims]
# Extract clustering results
cluster_id <- seurat_obj[[cluster_col]]
if (use_approx) {
# Use approxSilhouette
sil_df <- approxSilhouette(pca_data, clusters = as.factor(cluster_id))   # Calculate Approximate Silhouette Score
colnames(sil_df) <- c("cluster", "neighbor", "sil_width")
} else {
# Use precise silhouette calculation
dist_matrix <- dist(pca_data)                               # Calculate the Euclidean distance matrix between all cells
sil <- silhouette(as.integer(cluster_id), dist_matrix)      # Calculate Precise Silhouette Score
sil_df <- as.data.frame(sil)
levels <- levels(as.factor(cluster_id))                     # Change the name back to Seurat's original cluster name
sil_df$cluster <- factor(levels[sil_df$cluster], levels = levels)
sil_df$neighbor <- factor(levels[sil_df$neighbor], levels = levels)
}
# Convert cluster and neighbor to factor
sil_df$cluster <- factor(sil_df$cluster)
sil_df$neighbor <- factor(sil_df$neighbor)
# ------------------DRAW PICTURE ------------------
method_label <- if (use_approx) {
"Approximate Silhouette Score"
} else {
"Precise Silhouette Score"
}
silhouette_plot <- ggplot(sil_df, aes(x = cluster, y = sil_width)) +
geom_violin(aes(fill = cluster), scale = "width", trim = FALSE, color = NA, alpha = 0.7) +
geom_jitter(aes(color = neighbor), width = 0.2, size = 1) +
scale_y_continuous(name = "Silhouette width") +
theme_minimal() +
labs(
title = paste(method_label, "per cluster"),
x = "Cluster",
fill = "Cluster",
color = "Closest Cluster"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Return results
return(list(
silhouette_df = sil_df,
plot = silhouette_plot
))
}
# LOADING PACKAGES
library(Seurat)
library(cluster)   # For silhouette()
library(bluster)   # For approxSilhouette()
library(ggplot2)
library(dplyr)
# run runSilhouetteAnalysis
cell_Silhouette <- runSilhouetteAnalysis(
seurat_obj = scRNA,      # your Seurat object [after FindClusters()]
dims = 1:50,             # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
use_approx = FALSE,               # Set to TRUE to use approxSilhouette(), FALSE for silhouette()
cluster_col = "seurat_clusters"   # In metadata, what column stores your cluster information?
)
runSilhouetteAnalysis <- function(seurat_obj,
dims = 1:50,
use_approx = FALSE,
cluster_col = "seurat_clusters") {
# ------------------CALCULATE SILHOUETTE SCORE------------------
# Extract PCA results
pca_data <- Embeddings(seurat_obj, "pca")[, dims]
# Extract clustering results
cluster_id <- seurat_obj[[cluster_col]][, 1]
if (use_approx) {
# Use approxSilhouette
sil_df <- approxSilhouette(pca_data, clusters = as.factor(cluster_id))   # Calculate Approximate Silhouette Score
colnames(sil_df) <- c("cluster", "neighbor", "sil_width")
} else {
# Use precise silhouette calculation
dist_matrix <- dist(pca_data)                               # Calculate the Euclidean distance matrix between all cells
sil <- silhouette(as.integer(cluster_id), dist_matrix)      # Calculate Precise Silhouette Score
sil_df <- as.data.frame(sil)
levels <- levels(as.factor(cluster_id))                     # Change the name back to Seurat's original cluster name
sil_df$cluster <- factor(levels[sil_df$cluster], levels = levels)
sil_df$neighbor <- factor(levels[sil_df$neighbor], levels = levels)
}
# Convert cluster and neighbor to factor
sil_df$cluster <- factor(sil_df$cluster)
sil_df$neighbor <- factor(sil_df$neighbor)
# ------------------DRAW PICTURE ------------------
method_label <- if (use_approx) {
"Approximate Silhouette Score"
} else {
"Precise Silhouette Score"
}
silhouette_plot <- ggplot(sil_df, aes(x = cluster, y = sil_width)) +
geom_violin(aes(fill = cluster), scale = "width", trim = FALSE, color = NA, alpha = 0.7) +
geom_jitter(aes(color = neighbor), width = 0.2, size = 1) +
scale_y_continuous(name = "Silhouette width") +
theme_minimal() +
labs(
title = paste(method_label, "per cluster"),
x = "Cluster",
fill = "Cluster",
color = "Closest Cluster"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Return results
return(list(
silhouette_df = sil_df,
plot = silhouette_plot
))
}
# run runSilhouetteAnalysis
cell_Silhouette <- runSilhouetteAnalysis(
seurat_obj = scRNA,      # your Seurat object [after FindClusters()]
dims = 1:50,             # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
use_approx = FALSE,               # Set to TRUE to use approxSilhouette(), FALSE for silhouette()
cluster_col = "seurat_clusters"   # In metadata, what column stores your cluster information?
)
# view the result
print(cell_Silhouette$plot)
head(cell_Silhouette$silhouette_df)
test_diff_k.param <- function(seurat_obj,
k.values = seq(5, 50, by = 5),  # Set of k.param values
resolution = 0.5,       # Fixed resolution
dims_1 = 1:10,          # This `dims` use to pass to FindNeighbors()
dims_2 = 1:50,          # This `dims` use to calculate the Euclidean distance
use_approx = FALSE      # Set to TRUE to use approxSilhouette(), FALSE for silhouette()
) {
# ------------------CALCULATE SILHOUETTE SCORE------------------
silhouette_scores <- c()
for (k in k.values) {
# FindNeighbors
seurat_obj <- FindNeighbors(seurat_obj, reduction = "pca", dims = dims_1, k.param = k)
# FindClusters
seurat_obj <- FindClusters(seurat_obj, resolution = resolution)
# Extract clustering results
clusters <- seurat_obj$seurat_clusters
# Extracting PCA results
pca_embeddings <- Embeddings(seurat_obj, reduction = "pca")[, dims_2]
# Calculate the silhouette Score
if (use_approx) {
sil <- approxSilhouette(pca_embeddings, clusters)             # Calculate Approximate Silhouette Score
silhouette_scores <- c(silhouette_scores, mean(sil$width))    # Calculate mean Silhouette Score
} else {
dist_matrix <- dist(pca_embeddings)                           # Calculate the Euclidean distance matrix between all cells
sil <- silhouette(as.integer(clusters), dist_matrix)          # Calculate Precise Silhouette Score
silhouette_scores <- c(silhouette_scores, mean(sil[, 3]))     # Calculate mean Silhouette Score
}
}
# Organise into dataframe
silhouette_scores <- data.frame(K_param = k.values, Silhouette = silhouette_scores)
# ------------------DRAW PICTURE ------------------
method_label <- if (use_approx) {
"Approximate Silhouette Score"
} else {
"Precise Silhouette Score"
}
silhouette_plot <- ggplot(silhouette_scores, aes(x = K_param, y = Silhouette)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = paste("K.param vs", method_label),
x = "K.param (Number of Nearest Neighbors)",
y = "Average Silhouette Score")
# ------------------RETURN RESULTS ------------------
return(list(
silhouette_scores = silhouette_scores,
plot = silhouette_plot
))
}
# LOADING PACKAGES
library(Seurat)
library(cluster)   # For silhouette()
library(bluster)   # For approxSilhouette()
library(ggplot2)
# run test_diff_k.param
test_k.param <- test_diff_k.param(
seurat_obj = scRNA,            # your Seurat object [after RunPCA()]
k.values = seq(5, 50, by = 5), # Set of k.param values
resolution = 0.5,              # Fixed resolution
dims_1 = 1:10,                 # This `dims` use to pass to FindNeighbors(). Reducing dim properly can speed up
dims_2 = 1:50,                 # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
use_approx = FALSE             # Set to TRUE to use approxSilhouette(), FALSE for silhouette()
)
# see the diferent k.param mean silhouette_scores
test_k.param$silhouette_scores
# draw picture
test_k.param$plot
#### loading package ####
library(dplyr)
library(Seurat)
library(sctransform)
library(ggplot2)
library(reshape2)
library(patchwork)
####loading DATA#####
scRNA.data <- Read10X(data.dir = "./demo_data_1/filtered_gene_bc_matrices/hg19/")
scRNA <- CreateSeuratObject(counts = scRNA.data,
project = "pbmc3k",
min.cells = 3,               # Include features where at least this many cells are detected
min.features = 200)          # Include cells where at least this many features are detected
scRNA
####QC metrics and filter####
scRNA[["percent.mt"]] <- PercentageFeatureSet(scRNA, pattern = "^MT-")
# calculate erythrocyte QC metrics
## HB.genes(including human,mouse,Rat)
HB.genes <- c("HBA1", "HBA2", "HBB", "HBD", "HBE1", "HBG1", "HBG2", "HBM", "HBQ1", "HBZ","Hba-a1", "Hba-a2", "Hbb-b1", "Hbb-b2", "Hbb-y", "Hbb-bh1", "Hbe1", "Hbg1", "Hbg2", "Hbz","Hba1", "Hba2", "Hbb", "Hbd", "Hbe1", "Hbg1", "Hbg2", "Hbq1", "Hbz")
## Match the expression matrix and select the HB.genes
HB_m <- match(HB.genes, rownames(scRNA@assays$RNA))
HB.genes <- rownames(scRNA@assays$RNA)[HB_m]
HB.genes <- HB.genes[!is.na(HB.genes)]
## calculate erythrocyte QC metrics
scRNA[["percent.HB"]]<-PercentageFeatureSet(scRNA, features=HB.genes)
scRNA <- subset(scRNA, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#NormalizeData######
scRNA <- NormalizeData(scRNA, normalization.method = "LogNormalize", scale.factor = 10000)
####VariableFeatures#####
scRNA <- FindVariableFeatures(scRNA, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(scRNA), 10)
##scale data####
all.genes <- rownames(scRNA)
scRNA <- ScaleData(scRNA, features = all.genes)
###pca#####
scRNA <- RunPCA(scRNA, features = VariableFeatures(object = scRNA))
print(scRNA[["pca"]], dims = 1:5, nfeatures = 5)
scRNA <- FindNeighbors(scRNA, dims = 1:10)
scRNA <- FindClusters(scRNA, resolution = 0.5)
runNeighborPurity <- function(seurat_obj,    # your Seurat object [after FindClusters()]
dims = 1:50,   # This `dims` use to calculate the Euclidean distance
k = 50,        # number of neighbors
weighted = TRUE,         # TRUE is weight consideration, FALSE is not weight consideration
BNPARAM = KmknnParam(),  # what method is used to find Approximate nearest neighbor (ANN)
num.threads = 1,         # number of threads to use for the search
cluster_col = "seurat_clusters",  # Cluster column in metadata
plot_title = NULL                 # title name, set `NULL` auto set title name
) {
# ------------------ PCA + Cluster Extraction ------------------
pca_data <- Embeddings(seurat_obj, "pca")[, dims]
clusters <- seurat_obj[[cluster_col]][, 1]
# ------------------ Compute Neighbor Purity ------------------
purity_scores <- bluster::neighborPurity(
x = pca_data,
clusters = clusters,
k = k,
weighted = weighted,
BNPARAM = BNPARAM,
num.threads = num.threads
)
# ------------------ Construct Per-Cell Purity DataFrame ------------------
purity_df <- data.frame(
cell = Cells(seurat_obj),
cluster = clusters,
purity = purity_scores$purity
)
# ------------------ Cluster Summary ------------------
purity_summary <- purity_df %>%
group_by(cluster) %>%
summarise(median_purity = median(purity), .groups = "drop") %>%
arrange(desc(median_purity))
# ------------------ Dynamically Create Plot Title ------------------
method_name <- class(BNPARAM)[1]
if (is.null(plot_title)) {
plot_title <- paste("Per-cell Neighbor Purity -", method_name)
}
# ------------------ Plot ------------------
purity_plot <- ggplot(purity_df, aes(x = factor(cluster), y = purity, fill = factor(cluster))) +
geom_violin(trim = FALSE, scale = "width", alpha = 0.7) +
geom_jitter(width = 0.2, size = 0.7, color = "black", alpha = 0.3) +
theme_minimal() +
labs(
title = plot_title,
x = "Cluster",
y = "Purity",
fill = "Cluster"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ------------------ Return Output ------------------
return(list(
purity_df = purity_df,
purity_summary = purity_summary,
purity_plot = purity_plot
))
}
#  LOADING PACKAGES
library(Seurat)
library(bluster)       # For neighborPurity()
library(dplyr)
library(ggplot2)
library(BiocNeighbors) # for Approximate nearest neighbor (ANN)
# Run runNeighborPurity()
Clustering_Purity <- runNeighborPurity(
seurat_obj = scRNA,     # your Seurat object [after FindClusters()]
dims = 1:50,            # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
k = 20,                          # number of neighbors
weighted = TRUE,                 # TRUE is weight consideration, FALSE is not weight consideration
BNPARAM = ExhaustiveParam(),     # what method is used to find Approximate nearest neighbor (ANN)
num.threads = 8,                 # number of threads to use for the search
cluster_col = "seurat_clusters", # Cluster column in metadata
plot_title = NULL                # title name, set `NULL` auto set title name
)
# View table of Purity of each cells
head(Clustering_Purity$purity_df,n=5)
# View summary table of median purity of each cluster
print(Clustering_Purity$purity_summary)
# Show Images
print(Clustering_Purity$purity_plot)
View(scRNA)
View(scRNA@meta.data)
# Run runNeighborPurity()
Clustering_Purity <- runNeighborPurity(
seurat_obj = scRNA,     # your Seurat object [after FindClusters()]
dims = 1:50,            # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
k = 10,                          # number of neighbors
weighted = TRUE,                 # TRUE is weight consideration, FALSE is not weight consideration
BNPARAM = ExhaustiveParam(),     # what method is used to find Approximate nearest neighbor (ANN)
num.threads = 8,                 # number of threads to use for the search
cluster_col = "seurat_clusters", # Cluster column in metadata
plot_title = NULL                # title name, set `NULL` auto set title name
)
# View table of Purity of each cells
head(Clustering_Purity$purity_df,n=5)
# View summary table of median purity of each cluster
print(Clustering_Purity$purity_summary)
# Show Images
print(Clustering_Purity$purity_plot)
# Run runNeighborPurity()
Clustering_Purity <- runNeighborPurity(
seurat_obj = scRNA,     # your Seurat object [after FindClusters()]
dims = 1:50,            # This `dims` use to calculate the Euclidean distance. Reducing dim properly can speed up
k = 5,                          # number of neighbors
weighted = TRUE,                 # TRUE is weight consideration, FALSE is not weight consideration
BNPARAM = ExhaustiveParam(),     # what method is used to find Approximate nearest neighbor (ANN)
num.threads = 8,                 # number of threads to use for the search
cluster_col = "seurat_clusters", # Cluster column in metadata
plot_title = NULL                # title name, set `NULL` auto set title name
)
# View table of Purity of each cells
head(Clustering_Purity$purity_df,n=5)
# View summary table of median purity of each cluster
print(Clustering_Purity$purity_summary)
# Show Images
print(Clustering_Purity$purity_plot)
source("C:/Users/Administrator/Desktop/bioinformation/single cell of 2025/demo.R")
#### loading package ####
library(dplyr)
library(Seurat)
library(sctransform)
library(ggplot2)
library(reshape2)
library(patchwork)
?tsne
?TSNEPlot
?RunTSNE()
PrintTSNEParams
?Rtsne::Rtsne()
?fftRtsne::fftRtsne()
?fftRtsne()
??fftRtsne()
??FIt-SNE
source("C:/Users/Administrator/Desktop/bioinformation/single cell of 2025/demo.R")
